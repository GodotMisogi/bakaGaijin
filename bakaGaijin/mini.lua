local code = [==[
local a=1.4;local b=100;local c=10;local d=60000;b=b/a;local e=resource:getName()local exports=exports;local f={__mode="v"}local g;local h;local i;local j;local k={}do local l=function(self,m)self[m]=k.new(getmetatable(self).cardinality-1)return self[m]end;k.new=function(n)assert(n>0,"Invalid cardinality")if n==1 then local o={}setmetatable(o,f)return o else local self={}setmetatable(self,{cardinality=n,__index=l})return self end end end;local p={}local q={}local r={}setmetatable(r,{__mode="k"})local s={}local t={}local u={}local v=k.new(2)local w=k.new(2)local x={}do local y=1;j=function(z)y=y+1;if z or y>=c then collectgarbage()y=0 end;for A,table in pairs(w)do for B,C in pairs(table)do if not v[A][B]then local D=w[A][B]w[A][B]=nil;if getResourceFromName(A)then exports[A]:bakaGaijin_export("unsub",B,D)end end end end end;setTimer(j,d,0)end;do local E=function(F,G)F=r[F]assert(getResourceFromName(F.__gaijin_res),"Gaijin tried accessing dead resource.")return h(exports[F.__gaijin_res]:bakaGaijin_export("get",F.__gaijin_id,F.__gaijin_stamp,i(G)))end;local H=function(F,G,I)F=r[F]assert(getResourceFromName(F.__gaijin_res),"Gaijin tried accessing dead resource.")exports[F.__gaijin_res]:bakaGaijin_export("set",F.__gaijin_id,F.__gaijin_stamp,i(G),i(I))end;local J=function(F)F=r[F]assert(getResourceFromName(F.__gaijin_res),"Gaijin tried accessing dead resource.")return"gaijin_object: "..exports[F.__gaijin_res]:bakaGaijin_export("str",F.__gaijin_id,F.__gaijin_stamp)end;local K=function(F,...)F=r[F]local L={...}for M,I in ipairs(L)do L[M]=i(I)end;assert(getResourceFromName(F.__gaijin_res),"Gaijin tried accessing dead resource.")local o={exports[F.__gaijin_res]:bakaGaijin_export("call",F.__gaijin_id,F.__gaijin_stamp,unpack(L))}for M,I in ipairs(o)do o[M]=h(I)end;return unpack(o)end;g={__index=E,__newindex=H,__tostring=J,__call=K}end;i=function(N)local O=type(N)if O~="table"and O~="function"then return N end;if r[N]then return r[N]end;local P={}local Q=#p+1;p[Q]=N;s[Q]={}q[Q]=math.random(50000)P.__gaijin_id=Q;P.__gaijin_res=e;P.__gaijin_stamp=q[Q]if O=="function"then P.__gaijin_fun=true end;r[N]=P;return P end;h=function(R)if type(R)~="table"then return R end;local S=R.__gaijin_res;local B=R.__gaijin_id;if S==e then if R.__gaijin_stamp~=q[B]then outputDebugString("Stamp mismatch",1)return nil end;return p[B]elseif S then if v[S][B]then return v[S][B]end;assert(getResourceFromName(S),"Gaijin tried accessing dead resource.")if not exports[S]:bakaGaijin_export("sub",B,R.__gaijin_stamp)then error("Expired PToken being converted to AToken \n"..debug.traceback())end;local T;if R.__gaijin_fun then T=function(...)return g.__call(T,...)end else T={}setmetatable(T,g)end;r[T]=R;v[S][B]=T;w[S][B]=R.__gaijin_stamp;return T else return R end end;local function U(V,W,X)X=h(X)local Y=p[W]if type(Y)~="table"then error("Attempted to index a non-table",4)end;return i(Y[X])end;local function Z(W)local Y=p[W]if type(Y)~="table"then return nil end;local P={}for M,I in pairs(Y)do P[i(M)]=i(I)end;return P end;local function _(W)local Y=p[W]if type(Y)~="table"then return nil end;local P={}for M=1,#Y do P[M]=i(Y[M])end;return P end;local function a0(V,W,X,a1)X=h(X)a1=h(a1)local Y=p[W]if type(Y)~="table"then error("Attempted to set key on a non-table")end;Y[X]=a1 end;local function a2(V,W,...)local Y=p[W]if type(Y)~="function"then if type(Y)~="table"and type(Y)~="userdata"then error("Attempted to call un uncallable")end;outputDebugString("Attempted to call a non-function, ignore if you are using userdata or __call metamethod.",2)end;local L={...}for M,I in ipairs(L)do L[M]=h(I)end;local a3={Y(unpack(L))}for M,I in ipairs(a3)do a3[M]=i(I)end;return unpack(a3)end;local function a4(B,V)if s[B]then if s[B][V]then if t[V]==1 then t[V]=nil else t[V]=t[V]-1 end else outputDebugString(e.." got a double unsub from "..V.." for "..B.."\n"..debug.traceback(),2)end;s[B][V]=nil else return nil end;for M in pairs(s[B])do return true end;r[p[B]]=nil;p[B]=nil;s[B]=nil;q[B]=nil end;local function a5(B,V)if not s[B][V]then t[V]=(t[V]or 0)+1 else outputDebugString(e.." got a double sub from "..V.." for "..B.."\n"..debug.traceback())end;s[B][V]=true;if t[V]>a*(u[V]or b)then if V==e then bakaGC()else exports[V]:bakaGaijin_export("free")end;u[V]=math.max(t[V],b)end;return true end;local a6={__index=function(F,m)return h(exports[F.res_name]:bakaGaijin_export("s2t",m))end,__newindex=function()error("You cannot set data for another resource.",2)end}local a7={__call=function(F,A)local a8={res_name=A}setmetatable(a8,a6)return a8 end}bakaGaijin=x;setmetatable(bakaGaijin,a7)bakaUpdateATC=j;function bakaGC()collectgarbage()j()end;function bakaGaijin_export(O,W,D,...)local sourceResource=getResourceName(sourceResource)if O=="s2t"then return i(x[W])elseif O=="free"then return bakaGC()end;if not p[W]or D~=q[W]then return nil end;if O=="get"then return U(sourceResource,W,...)elseif O=="set"then return a0(sourceResource,W,...)elseif O=="call"then return a2(sourceResource,W,...)elseif O=="sub"then return a5(W,sourceResource)elseif O=="unsub"then return a4(W,sourceResource)elseif O=="pairs"then return Z(W)elseif O=="ipairs"then return _(W)elseif O=="str"then return tostring(p[W])elseif O=="len"then return#p[W]else error("bakaGaijin_export called incorrectly by "..sourceResource)end end;function getBaka()local a9={}local aa=0;local ab={}local ac=0;for B,Y in pairs(p)do aa=aa+1 end;for B,table in pairs(s)do for A in pairs(table)do a9[A]=(a9[A]or 0)+1 end end;for A,table in pairs(v)do for B,ad in pairs(table)do ac=ac+1;local ae=ab[r[ad].__gaijin_res]ab[r[ad].__gaijin_res]=(ae or 0)+1 end end;return aa,ac,a9,ab end;function showBaka(af,ag)if not ag then ag=outputConsole end;ag("Called getBaka() for "..e)local ah,ai,a9,ab=getBaka()ag(table.concat({"Exporting ",ah," gaijins."}))if af then for M,I in pairs(a9)do ag(table.concat({M," -> ",I}))end end;ag(table.concat({"Using ",ai," gaijins."}))if af then for M,I in pairs(ab)do ag(table.concat({M," -> ",I}))end end end;function isBaka(ae)local o=r[ae]if o and o.__gaijin_res~=e then return true else return false end end;function len(F)local aj=r[F]if aj and aj.__gaijin_res~=e then return exports[aj.__gaijin_res]:bakaGaijin_export("len",aj.__gaijin_id,aj.__gaijin_stamp)else return#F end end;raw_ipairs=ipairs;raw_pairs=pairs;local ak=ipairs({})local al=pairs({})function ipairs(table)local aj=r[table]if aj and aj.__gaijin_res~=e then local am=exports[aj.__gaijin_res]:bakaGaijin_export("ipairs",aj.__gaijin_id,aj.__gaijin_stamp)local P={}for M,I in pairs(am)do P[M]=h(I)end;return ak,P,0 else return ak,table,0 end end;function pairs(table)local aj=r[table]if aj and aj.__gaijin_res~=e then local am=exports[aj.__gaijin_res]:bakaGaijin_export("pairs",aj.__gaijin_id,aj.__gaijin_stamp)local P={}for M,I in pairs(am)do P[h(M)]=h(I)end;return al,P,nil else return al,table,nil end end;addEventHandler("onClientResourceStop",getRootElement(),function(an)local ao=getResourceName(an)t[ao]=nil;u[ao]=nil;for B,table in pairs(s)do for V in pairs(table)do if V==ao then table[V]=nil end end end end)
]==]
--[[
This is a minified version of the code provided in file bakaGaijin.lua
]]

function use()
	return code
end

--TODO: No need to even export bakaGaijin_export
--use an element and trigger some events on it.
--Use another event trigger as callback for returned values
--Tested the above, it's upto 5 times slower, and would require us to build a callstack artifically
--Since one could use coroutines to call the trigger multiple times, and the wrong callback return may take place.